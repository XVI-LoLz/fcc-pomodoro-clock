{"version":3,"sources":["components/Timer.js","utils/utils.js","components/Controller.js","utils/reducer.js","App.js","serviceWorker.js","index.js"],"names":["Timer","messageCondition","buttonCondition","timeLeft","handleStartStop","handleReset","className","id","time","minutes","Math","floor","seconds","secondsToMMSS","onClick","Controller","str","label","state","modifier","disableCondition","handleClick","value","timer","toUpperCase","slice","reducer","action","type","isOnBreak","isTicking","isPlaying","App","React","useState","breakTime","setBreakTime","sessionTime","setSessionTime","setTimeLeft","useReducer","trackers","dispatch","useRef","audioRef","useEffect","current","setInterval","clearInterval","playAudio","pauseAudio","paused","pause","currentTime","play","src","ref","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.566235da.chunk.js","sourcesContent":["import React from 'react'\r\nimport { secondsToMMSS } from '../utils/utils' \r\nimport './Controller.css'\r\n\r\nexport default function Timer({ messageCondition, buttonCondition, timeLeft, handleStartStop, handleReset }){\r\n  return (\r\n    <div className='timer'>\r\n      <div id='timer-label' className='flex-center'>\r\n        {messageCondition ? 'Break Time' : 'Current Session'}\r\n      </div>\r\n      <div id='time-left' className='flex-center'>{secondsToMMSS(timeLeft)}</div>\r\n      <div id='start_stop' className='flex-center' onClick={handleStartStop}>\r\n        {buttonCondition ? 'PAUSE' : 'PLAY'}\r\n      </div>\r\n      <div id='reset' className='flex-center' onClick={handleReset}>RESET</div>\r\n    </div>\r\n  )\r\n}","const capitalize = (str) => {\r\n  return str[0].toUpperCase() + str.slice(1)\r\n}\r\n\r\nconst secondsToMinutes = (time) => {\r\n  return time / 60\r\n}\r\n\r\nconst secondsToMMSS = (time) => {\r\n  let minutes = Math.floor(time / 60)\r\n  let seconds = time % 60\r\n  if(minutes < 10)\r\n    minutes = '0' + minutes\r\n  if(seconds < 10)\r\n    seconds = '0' + seconds\r\n  return `${minutes}:${seconds}`\r\n}\r\n\r\nexport { capitalize, secondsToMinutes, secondsToMMSS }\r\n","import React from 'react'\r\nimport { capitalize, secondsToMinutes } from '../utils/utils' \r\nimport './Timer.css'\r\n\r\nexport default function Controller({ label, state, modifier, disableCondition }){\r\n  const seconds = 60\r\n\r\n  const handleClick = (value) => {\r\n    if(state + value > 0 && state + value <= 60 * seconds && !disableCondition)\r\n      modifier( timer => timer + value)\r\n  }\r\n\r\n  return(\r\n    <div className='controller flex-center'>\r\n      <div id={`${label}-label`} className='label'>\r\n        {capitalize(label)} Length \r\n      </div>\r\n      <div className='buttons flex-center'>\r\n        <div \r\n          id={`${label}-decrement`}\r\n          className='btn'\r\n          onClick={() => handleClick(-seconds)} \r\n        >\r\n          －\r\n        </div>\r\n        <div \r\n          id={`${label}-length`} \r\n          className='length'>{secondsToMinutes(state)}\r\n        </div>\r\n        <div\r\n          id={`${label}-increment`}\r\n          className='btn'\r\n          onClick={() => handleClick(seconds)} \r\n        >\r\n          ＋\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","\r\nconst START_TICKING = 'START_TICKING'\r\nconst STOP_TICKING = 'STOP_TICKING'\r\nconst START_BREAK = 'START_BREAK'\r\nconst STOP_BREAK = 'STOP_BREAK'\r\nconst START_PLAYING = 'START_PLAYING'\r\nconst STOP_PLAYING = 'STOP_PLAYING'\r\nconst RESET = 'RESET'\r\n\r\nfunction reducer( state, action ){\r\n  switch(action.type){\r\n    case RESET:\r\n      return {\r\n        isOnBreak: false,\r\n        isTicking: false,\r\n        isPlaying: false\r\n      }\r\n      case START_TICKING:\r\n        return {\r\n          ...state,\r\n          isTicking: true\r\n        }\r\n      case STOP_TICKING:\r\n        return {\r\n          ...state,\r\n          isTicking: false,\r\n        }\r\n    case START_BREAK:\r\n      return {\r\n        ...state,\r\n        isOnBreak: true,\r\n      }\r\n    case STOP_BREAK:\r\n      return {\r\n        ...state,\r\n        isOnBreak: false,\r\n      }\r\n    default:\r\n      return {\r\n        ...state\r\n      }\r\n  }\r\n}\r\n\r\nexport { reducer, START_TICKING, STOP_TICKING, START_BREAK, STOP_BREAK, START_PLAYING, STOP_PLAYING, RESET }","import React from 'react';\r\nimport Timer from './components/Timer'\r\nimport Controller from './components/Controller'\r\nimport { reducer, START_TICKING, STOP_TICKING, START_BREAK, STOP_BREAK, RESET } from './utils/reducer'\r\nimport './App.css';\r\n\r\nconst defaultBreakTime = 5*60\r\nconst defaultSessionTime = 25*60\r\n\r\nexport default function App() {\r\n  const [ breakTime, setBreakTime ] = React.useState(defaultBreakTime)\r\n  const [ sessionTime, setSessionTime ] = React.useState(defaultSessionTime)\r\n  const [ timeLeft, setTimeLeft ] = React.useState(sessionTime)\r\n  const [ trackers, dispatch ] = React.useReducer(\r\n    reducer,\r\n    {\r\n      isOnBreak: false,\r\n      isTicking: false,\r\n      isPlaying: false,\r\n    }\r\n  )\r\n\r\n  const id = React.useRef(null)\r\n  const audioRef = React.useRef(null)\r\n\r\n  React.useEffect(() => {\r\n    setTimeLeft(sessionTime)\r\n  },[sessionTime])\r\n\r\n  React.useEffect(() => {\r\n    id.current = setInterval(() => {\r\n      if(trackers.isTicking){\r\n        setTimeLeft(timer => timer - 1)\r\n      }\r\n    }, 1000);\r\n    return () => clearInterval(id.current)\r\n  },[trackers.isTicking])\r\n\r\n  React.useEffect(() => {\r\n    if(timeLeft === 0){\r\n      playAudio()\r\n      if(!trackers.isOnBreak){\r\n        dispatch({ type: START_BREAK })\r\n        setTimeLeft(breakTime)\r\n      }else{\r\n        dispatch({ type: STOP_BREAK })\r\n        setTimeLeft(sessionTime)\r\n      }\r\n    }\r\n  },[timeLeft, trackers.isOnBreak, breakTime, sessionTime])\r\n\r\n  const handleStartStop = () => {\r\n    if(!trackers.isTicking){\r\n      dispatch({ type: START_TICKING })\r\n    }  \r\n    else if(trackers.isTicking){\r\n      dispatch({ type: STOP_TICKING})\r\n    }\r\n  }\r\n\r\n  const handleReset = () => {\r\n    dispatch({ type: RESET })\r\n    setBreakTime(defaultBreakTime)\r\n    setSessionTime(defaultSessionTime)\r\n    setTimeLeft(sessionTime)\r\n    pauseAudio()\r\n  }\r\n\r\n  const pauseAudio = () => {\r\n    if(!audioRef.current.paused){\r\n      audioRef.current.pause()\r\n      audioRef.current.currentTime = 0\r\n    }\r\n  }\r\n\r\n  const playAudio = () => {\r\n    audioRef.current.play()\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className='controllers'>\r\n        <Controller\r\n          label='break'\r\n          state={breakTime}\r\n          modifier={setBreakTime}\r\n          disableCondition={trackers.isOnBreak}\r\n        />\r\n        <Controller\r\n          label='session'\r\n          state={sessionTime}\r\n          modifier={setSessionTime}\r\n          disableCondition={trackers.isTicking}\r\n        />\r\n      </div>\r\n      <Timer\r\n        messageCondition={trackers.isOnBreak}\r\n        buttonCondition={trackers.isTicking}\r\n        timeLeft={timeLeft}\r\n        handleStartStop={handleStartStop}\r\n        handleReset={handleReset}\r\n      />\r\n      <audio id='beep' src='https://z16th-bucket.s3-us-west-1.amazonaws.com/fcc-projects/alarm-sound-min.mp3' ref={audioRef} />\r\n    </div>\r\n  )\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}